def select_best_product(features):
    scores = {
        '–ö–∞—Ä—Ç–∞ —Å –∫—ç—à–±—ç–∫–æ–º': 0,
        '–î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π': 0,
        '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞': 0,
        '–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏': 0,
        '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π': 0,
        '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞': 0,
        '–û–±–º–µ–Ω –≤–∞–ª—é—Ç': 0,
        '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': 0
    }

    # üéí –¢—Ä–µ–≤–µ–ª-–∫–∞—Ä—Ç–∞
    if features.get('has_travel_signals') and features['total_transactions'] > 50:
        scores['–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'] += 12

    # üí∏ –ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏
    if features.get('has_credit_need') and features['std_transaction_amount'] > 5000:
        scores['–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏'] += 11

    # üëë –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
    if features.get('has_premium_signals') and features['avg_balance'] > 6_000_000:
        scores['–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞'] += 10

    # üè¶ –î–µ–ø–æ–∑–∏—Ç
    if features['salary_detected'] and features['avg_transaction_amount'] < 7000:
        scores['–î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π'] += 9
    if features['avg_balance'] > 500_000 and features['low_spending']:
        scores['–î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π'] += 5

    # üí≥ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
    if features['total_transfers'] > 20 and features['std_transaction_amount'] > 10000:
        scores['–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞'] += 8

    # üõçÔ∏è –ö—ç—à–±—ç–∫
    if features['total_transactions'] > 40:
        scores['–ö–∞—Ä—Ç–∞ —Å –∫—ç—à–±—ç–∫–æ–º'] += 7
    if '–º–∞–≥–∞–∑–∏–Ω' in features['top_categories'].lower() or features.get('has_cashback_signals'):
        scores['–ö–∞—Ä—Ç–∞ —Å –∫—ç—à–±—ç–∫–æ–º'] += 5

    # üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç
    if features.get('has_fx_transfers'):
        scores['–û–±–º–µ–Ω –≤–∞–ª—é—Ç'] += 6

    # üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    if features.get('has_invest_signals'):
        scores['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'] += 6

    # ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
    best_product = max(scores, key=scores.get)
    return best_product, scores
