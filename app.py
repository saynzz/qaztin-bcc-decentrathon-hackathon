import streamlit as st
import pandas as pd
import os
from src.features import extract_features
from src.product_selector import select_best_product
from src.push_generator import generate_push

DATA_FOLDER = 'data'

def get_client_codes():
    files = os.listdir(DATA_FOLDER)
    codes = set()
    for f in files:
        if f.endswith('_transactions_3m.csv'):
            parts = f.split('_')
            if len(parts) >= 3:
                codes.add(parts[1])
    return sorted(codes)

def load_client_data(client_code):
    tx_path = f'{DATA_FOLDER}/client_{client_code}_transactions_3m.csv'
    tf_path = f'{DATA_FOLDER}/client_{client_code}_transfers_3m.csv'

    if not os.path.exists(tx_path) or not os.path.exists(tf_path):
        return None, None

    tx = pd.read_csv(tx_path)
    tf = pd.read_csv(tf_path)

    tx.columns = tx.columns.str.strip()
    tf.columns = tf.columns.str.strip()

    return tx, tf

st.set_page_config(page_title="QazFinance Push Generator", layout="wide")

st.sidebar.image("assets/logo.png", width=150)
st.sidebar.title("QazFinance")
st.sidebar.markdown("–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

st.title("üì≤ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–∞")

client_codes = get_client_codes()
if not client_codes:
    st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ data/")
    st.stop()

client_code = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞", options=client_codes)

tx_df, tf_df = load_client_data(client_code)
if tx_df is None or tf_df is None:
    st.error(f"–§–∞–π–ª—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_code} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    st.stop()

features = extract_features(tx_df, tf_df)
product, scores = select_best_product(features)
push = generate_push(client_code, product, features, tone='friendly')

col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    st.dataframe(tx_df)

    st.subheader("üîÅ –ü–µ—Ä–µ–≤–æ–¥—ã")
    st.dataframe(tf_df)

with col2:
    st.subheader("üß† –§–∏—á–∏")
    st.json(features)

    st.subheader("üéØ –ü—Ä–æ–¥—É–∫—Ç")
    st.success(product)

    st.subheader("üìä –ë–∞–ª–ª—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º")
    scores_table = pd.DataFrame.from_dict(scores, orient='index', columns=['–ë–∞–ª–ª—ã']).sort_values(by='–ë–∞–ª–ª—ã', ascending=False)
    st.table(scores_table)

    st.subheader("üí¨ Push-—Å–æ–æ–±—â–µ–Ω–∏–µ")
    st.markdown(f"""
        <div style='background:#f0f8ff;padding:15px;border-radius:10px;font-size:16px'>
        {push}
        </div>
    """, unsafe_allow_html=True)

st.markdown("---")
st.caption("¬© QazTin ¬∑ –•–∞–∫–∞—Ç–æ–Ω BCC ¬∑ –°–¥–µ–ª–∞–Ω–æ —Å –∫–∞–π—Ñ–æ–º üíô")
