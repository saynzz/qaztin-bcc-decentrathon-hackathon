import streamlit as st
import pandas as pd
import os
import io
import plotly.express as px
from src.features import extract_features
from src.product_selector import select_best_product
from src.push_generator import generate_push

DATA_FOLDER = 'data'

def get_client_codes():
    files = os.listdir(DATA_FOLDER)
    codes = set()
    for f in files:
        if f.endswith('_transactions_3m.csv'):
            parts = f.split('_')
            if len(parts) >= 3:
                codes.add(parts[1])
    return sorted(codes)

def load_client_data(client_code):
    tx_path = f'{DATA_FOLDER}/client_{client_code}_transactions_3m.csv'
    tf_path = f'{DATA_FOLDER}/client_{client_code}_transfers_3m.csv'

    if not os.path.exists(tx_path) or not os.path.exists(tf_path):
        return None, None

    tx = pd.read_csv(tx_path)
    tf = pd.read_csv(tf_path)

    tx.columns = tx.columns.str.strip()
    tf.columns = tf.columns.str.strip()

    return tx, tf

def generate_submission(client_codes):
    results = []

    for code in client_codes:
        tx_df, tf_df = load_client_data(code)
        if tx_df is None or tf_df is None:
            continue

        features = extract_features(tx_df, tf_df)
        product, scores = select_best_product(features)
        push = generate_push(code, product, features, tone='friendly')

        results.append({
            "client_code": code,
            "product": product,
            "push_notification": push,
            "top_categories": features.get("top_categories", ""),
            "avg_transaction_amount": round(features.get("avg_transaction_amount", 0), 2),
            "score_" + product: scores.get(product, 0)
        })

    return pd.DataFrame(results)

st.set_page_config(page_title="QazFinance Push Generator", layout="wide")

st.sidebar.image("assets/logo.png", width=150)
st.sidebar.title("QazTin")
st.sidebar.markdown("–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

st.title("üì≤ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–∞")

client_codes = get_client_codes()
if not client_codes:
    st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ data/")
    st.stop()

client_code = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞", options=client_codes)

tx_df, tf_df = load_client_data(client_code)
if tx_df is None or tf_df is None:
    st.error(f"–§–∞–π–ª—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_code} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    st.stop()

features = extract_features(tx_df, tf_df)
product, scores = select_best_product(features)
push = generate_push(client_code, product, features, tone='friendly')

col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    st.dataframe(tx_df)

    if 'category' in tx_df.columns:
        st.subheader("üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        category_summary = tx_df.groupby('category')['amount'].sum().reset_index()
        fig_cat = px.bar(category_summary, x='category', y='amount',
                         title='–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                         labels={'amount': '–°—É–º–º–∞ (‚Ç∏)', 'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'},
                         text_auto='.2s')
        fig_cat.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig_cat, use_container_width=True)

    st.subheader("üîÅ –ü–µ—Ä–µ–≤–æ–¥—ã")
    st.dataframe(tf_df)

    if 'date' in tf_df.columns:
        st.subheader("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º")
        tf_df['date'] = pd.to_datetime(tf_df['date'])
        transfers_by_day = tf_df.groupby(tf_df['date'].dt.date)['amount'].sum().reset_index()
        fig_tf = px.line(transfers_by_day, x='date', y='amount',
                         title='–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º',
                         labels={'amount': '–°—É–º–º–∞ (‚Ç∏)', 'date': '–î–∞—Ç–∞'})
        st.plotly_chart(fig_tf, use_container_width=True)

    if 'avg_balance' in features and features['avg_balance'] > 0:
        st.subheader("üí∞ –°—Ä–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫")
        st.metric(label="–°—Ä–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å—á—ë—Ç–µ", value=f"{int(features['avg_balance']):,} ‚Ç∏")

with col2:
    st.subheader("üß† –§–∏—á–∏")
    st.json(features)

    st.subheader("üéØ –ü—Ä–æ–¥—É–∫—Ç")
    st.success(product)

    st.subheader("üìä –ë–∞–ª–ª—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º")
    scores_table = pd.DataFrame.from_dict(scores, orient='index', columns=['–ë–∞–ª–ª—ã']).sort_values(by='–ë–∞–ª–ª—ã', ascending=False)
    st.table(scores_table)

    st.subheader("üì± Push-–ø—Ä–µ–≤—å—é (–º–æ–±–∏–ª—å–Ω—ã–π —Å—Ç–∏–ª—å)")
    st.markdown(f"""
    <div style='background:#1e1e1e;padding:20px;border-radius:20px;width:100%;max-width:400px;margin:auto;color:white;font-family:sans-serif'>
        <div style='display:flex;align-items:center;margin-bottom:10px'>
            <img src='https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Qazkom_Logo.svg/2560px-Qazkom_Logo.svg.png' width='24' style='margin-right:10px;border-radius:4px'>
            <span style='font-weight:bold'>QazFinance</span>
        </div>
        <div style='background:#2e2e2e;padding:15px;border-radius:10px;font-size:15px;line-height:1.4'>
            {push}
        </div>
        <div style='margin-top:12px;display:flex;justify-content:space-between'>
            <button style='background:#007aff;border:none;color:white;padding:8px 16px;border-radius:8px;font-size:14px'>–û—Ñ–æ—Ä–º–∏—Ç—å</button>
            <button style='background:#444;border:none;color:white;padding:8px 16px;border-radius:8px;font-size:14px'>–ü–æ–∑–∂–µ</button>
        </div>
    </div>
    """, unsafe_allow_html=True)

st.markdown("### üì§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è push-—Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º")

if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö"):
    submission_df = generate_submission(client_codes)

    if submission_df.empty:
        st.error("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å CSV ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    else:
        st.subheader("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä push-—Å–æ–æ–±—â–µ–Ω–∏–π")
        st.dataframe(submission_df)

        csv_buffer = io.StringIO()
        submission_df.to_csv(csv_buffer, index=False)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å submission.csv",
            data=csv_buffer.getvalue(),
            file_name="submission.csv",
            mime="text/csv"
        )

st.markdown("---")
st.caption("¬© QazTin ¬∑ –•–∞–∫–∞—Ç–æ–Ω BCC ¬∑ –°–¥–µ–ª–∞–Ω–æ —Å –∫–∞–π—Ñ–æ–º üíô")
